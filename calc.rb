#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "calc.y".
#

require 'racc/parser'


# $Id: calc.y,v 1.4 2005/11/20 13:29:32 aamine Exp $

class Calcp < Racc::Parser

module_eval <<'..end calc.y modeval..iddcd512523d', 'calc.y', 32

  def initialize()
    @var = {}
  end

  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/
      when /\A\d+\.?\d*/
        @q.push [:NUMBER, $&.to_f]
      when /\A\w+/
        @q.push [:VAR,$&.to_s]
      when /\A.|\n/o
        s = $&
        @q.push [s, s]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

..end calc.y modeval..iddcd512523d

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 14, :_reduce_none,
 0, 14, :_reduce_2,
 3, 15, :_reduce_3,
 3, 15, :_reduce_4,
 3, 15, :_reduce_5,
 3, 15, :_reduce_6,
 3, 15, :_reduce_7,
 3, 15, :_reduce_8,
 2, 15, :_reduce_9,
 3, 15, :_reduce_10,
 1, 15, :_reduce_none,
 1, 15, :_reduce_12 ]

racc_reduce_n = 13

racc_shift_n = 24

racc_action_table = [
     9,    10,    11,    12,    13,     7,     5,    23,     6,     8,
     1,     2,     5,    14,     6,    17,     1,     2,     5,   nil,
     6,   nil,     1,     2,     5,   nil,     6,   nil,     1,     2,
     5,   nil,     6,   nil,     1,     2,     5,   nil,     6,   nil,
     1,     2,     5,   nil,     6,   nil,     1,     2,     5,   nil,
     6,   nil,     1,     2,     9,    10,    11,    12,    13,     9,
    10,    11,    12,    13,     9,    10,    11,     9,    10,    11 ]

racc_action_check = [
    15,    15,    15,    15,    15,     2,    11,    15,    11,     3,
    11,    11,    13,     5,    13,     8,    13,    13,    12,   nil,
    12,   nil,    12,    12,     0,   nil,     0,   nil,     0,     0,
     6,   nil,     6,   nil,     6,     6,     7,   nil,     7,   nil,
     7,     7,    10,   nil,    10,   nil,    10,    10,     9,   nil,
     9,   nil,     9,     9,    16,    16,    16,    16,    16,     4,
     4,     4,     4,     4,    21,    21,    21,    22,    22,    22 ]

racc_action_pointer = [
    17,   nil,    -3,     9,    56,     2,    23,    29,    15,    41,
    35,    -1,    11,     5,   nil,    -3,    51,   nil,   nil,   nil,
   nil,    61,    64,   nil ]

racc_action_default = [
    -2,   -11,   -12,   -13,    -1,   -13,   -13,   -13,   -13,   -13,
   -13,   -13,   -13,   -13,    -9,   -13,   -10,    24,    -5,    -6,
    -7,    -3,    -4,    -8 ]

racc_goto_table = [
     4,     3,   nil,   nil,   nil,   nil,    15,    16,   nil,    18,
    19,    20,    21,    22 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,   nil,     2,     2,   nil,     2,
     2,     2,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 "*" => 3,
 "/" => 4,
 "%" => 5,
 "+" => 6,
 "-" => 7,
 "=" => 8,
 "(" => 9,
 ")" => 10,
 :NUMBER => 11,
 :VAR => 12 }

racc_use_result_var = true

racc_nt_base = 13

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'"*"',
'"/"',
'"%"',
'"+"',
'"-"',
'"="',
'"("',
'")"',
'NUMBER',
'VAR',
'$start',
'target',
'exp']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'calc.y', 14
  def _reduce_2( val, _values, result )
 result = 0
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 16
  def _reduce_3( val, _values, result )
 result += val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 17
  def _reduce_4( val, _values, result )
 result -= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 18
  def _reduce_5( val, _values, result )
 result *= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 19
  def _reduce_6( val, _values, result )
 result /= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 20
  def _reduce_7( val, _values, result )
 result %= val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 21
  def _reduce_8( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 22
  def _reduce_9( val, _values, result )
 result = -val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 23
  def _reduce_10( val, _values, result )
 result = @var[val[0]] = val[2]
   result
  end
.,.,

 # reduce 11 omitted

module_eval <<'.,.,', 'calc.y', 25
  def _reduce_12( val, _values, result )
 result=@var[val[0]]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class Calcp


parser = Calcp.new
puts
puts 'type "Q" to quit.'
puts
while true
  puts
  print '? '
  str = gets.chop!
  break if /q/i =~ str
  begin
    puts "= #{parser.parse(str)}"
  rescue ParseError
    puts $!
  end
end
